# Recap
Now is a good moment to stop and summarize everything we have done so far.

- Defined a valid Lir source file;
- Formatted and structured the file using markdown;
- Defined a code chunk and tangled it to a file;
- Defined a Bash program and an SWI-Prolog program;
- Declared rules for file dependencies and for executing programs;
- Inserted a listing of a result file to a display item in the final document.
- Along the way, generated the final document for every version of the Lir
  source file.

## Relax
At this point, you might be feeling a bit overwhelmed by Lir.  Why do we
need to use code chunks?  Why do we need to use Make?  Why do we need to
generate display items?

There are two answers for these question.  The first goes: It is so easy
to do all these things with Lir, that it doesn't add anything to your
workload.

To give the second answer, we need some background.  Consider for a
moment how you would generate the results from a series of programs?  At
first, you define your programs.  Then, as they add up, you start using
a script to run the programs for you.  At some point you realize you are
generating again and again intermediate files that cannot have changed.
You start using Make to deal with the dependencies, so you end up
replacing your run script with a makefile.  And if you happen to need to
share your work with someone, you have to provide some documentation to
go with your code: code that is now scattered among all the source files
and the makefile.

Here is where Lir comes in.  You keep the source of all your executable
files in the Lir source file.  You can even document it a bit, as long
as it doesn't slow you down too much.  From the start, you declare the
dependencies between your input, your code, and your results.
Extracting the source files, running them, displaying the results: all
that is done automatically by Lir.
