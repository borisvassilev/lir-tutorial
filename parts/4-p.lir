# Select words
What is a dictionary that is useful as input to our program?  What exactly
is the program going to do?  We want to find a signature for every word in
the dictionary.  To do that, we will sort the characters of each word.  If
a two different words have the same signature, this means they have the
exact same letters, so, they are anagrams of each other.

I will use [the dictionary available with the Linux
distribution](/usr/share/dict/words).  This file was copied to the working
directory under the name `en-dict`, and declared as an input file (source).
<<:source en-dict>>=
@
The last two lines are the first example of a special code chunk that
declares a source (input data) for our work flow.  The name of the code
chunk must begin with the string ":source", followed by a single space
character, and a path to the file.  The path may be an absolute path, but
it is much easier to use a path relative to the working directory.

This dictionary is meant to be used by other programs, for example to check
spelling.  It contains duplicate version of many words, only with the first
letter capitalized or suffixed by an "'s".  To get rid of these duplicates,
we define a bash script.  It contains three components in a pipe:

<<clean-en-dict.sh>>=
<<Delete all words with apostrophes>> \
        | <<Set all letters to lower case>> \
        | <<Sort, leaving only unique entries>>
@
The code chunk [[<<clean-en-dict.sh>>]] is used to define the pipe that
cleans the dictionary file. It is a root chunk: it is not referenced by
name in any other code chunk. It contains references to other code chunks
by name.

The first chunk referenced above is
[[<<Delete all words with apostrophes>>]].
To to this, we use `sed`:
<<Delete all words with apostrophes>>=
sed -n "/'/!p"
@

Then comes [[<<Set all letters to lower case>>]].
It is a call to a SWI-Prolog script that converts all letters to lower
case.
<<Set all letters to lower case>>=
<<Run SWI-Prolog script>> to-lower-case.prolog
@
The script [[<<to-lower-case.prolog>>]] has to be declared as a dependency
of the Bash script that uses it:
<<:make>>=
clean-en-dict.sh: to-lower-case.prolog

@
The SWI-Prolog script reads all input, [converts it to lower
case](http://eu.swi-prolog.org/pldoc/doc_for?object=string_lower/2), and
writes it to output.  I decided to use SWI-Prolog for this because it
can deal with Unicode, and because you should have it on your machine if
Lir is installed.
<<to-lower-case.prolog>>=
main :-
        read_string(current_input, _, Input),
        string_lower(Input, Output),
        format(current_output, "~s", [Output]).
@
To safely run this and any Prolog program that defines a `main`, we can do:
<<Run SWI-Prolog script>>=
swipl -q -O -g 'main,halt' -t 'halt(1)'
@
While it is not strictly necessary to define this in a code chunk of its
own, this code chunk might prove useful later, if we have to run another
SWI-Prolog script.

At the end, everything is sorted, leaving only unique entries.
<<Sort, leaving only unique entries>>=
sort --unique
@

We define the transformation from the original file `en-dict` to the
cleaned `en-words` as another rule:
<<:make>>=
en-words: en-dict clean-en-dict.sh
	bash clean-en-dict.sh < $< > $@

@
There is an empty line after the second line: it is necessary in order to
finish the rule.

The first line of this rule reads:

> To generate the file `en-words`, you need the files `en-dict` and
> `clean-en-dict.sh`.

The second line of the rule reads:

> Run the bash script `clean-en-dict.sh` to convert the first prerequisite
> `en-dict` (written as `$<`) to create the target `en-words` (written as
> `$@`).

Note the use of the two [Make automatic
variables](https://www.gnu.org/software/make/manual/html_node/Automatic-Variables.html#Automatic-Variables):
`$<` stands for "the first prerequisite, and `$@` stands for "the target".
It is not strictly necessary to use automatic variables in the rules we
define with Lir.  Instead, the rule could have just as well been written
with the full file names:
<<: Another way to declare the rule>>=
en-words: en-dict clean-en-dict.sh
	bash clean-en-dict.sh < en-dict > en-words

@
However, it is good practice to use the automatic variables: it is easier
to change and reuse the rules (more on that later).

The name of the above code chunk, [[<<: Another way to declare the rule>>]],
starts with a colon (`:`), but there is no keyword like `make` or `source`
following it.  This code chunk will appear in the final document, but it will
not be considered an executable program by Lir.  I tend to use such code
chunks to show code verbatim in my final document.

Finally, to have a vague idea if this all worked, we can add a display item
with the sizes of the original and the cleaned dictionary.  Immediately
below the placeholder for the listing is the rule for generating the result
using `wc`.
<<:listing en-sizes>>=
title: Word file sizes.
<<:make>>=
en-sizes: en-words en-dict
	wc --lines $^ > $@

@
In this last ":make" code chunk, I have used the `$^` Make special
variable, "all prerequisites to a target".
