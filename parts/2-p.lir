# Document formatting and structure
The previous part contains a few examples of using markdown to format your
text.  In this part, we will see more uses of markdown.  At the beginning
of this paragraph, there is a line starting with a hash sign (`#`).  This
defines a section heading: in the final document, "Document formatting and
structure" will be typeset differently, and it will appear in a table of
contents at the beginning of the document.

First, let's give our data analysis an aim and a name.  We want to find
anagrams of words in the English language.  We will call the data analysis
"Anagrams", and give our name as an author.

---
title: 'Lir Tutorial: Finding Anagrams'
author: Boris Vassilev
...

(This will not appear in the final document at that spot: it will be used
to create the document title.)

## Sections and subsections
By using 1, 2, or 3 hash signs at the beginning of the line, we define
sections, subsections, subsubsections in the final document.

## Links
Here is a [link to the Pandoc User's Guide](http://pandoc.org/MANUAL.html).
I usually need to keep this guide open while I'm writing a Lir source file.

# Making the final document
In order to be able to use Lir efficiently, you need to learn at least a
bit about the program Make and the syntax of Makefiles.  Here, we will
define a Makefile for our data analysis.  It tells make
that to make all files, it needs to generate the file `anagrams.html` by
running the program `lir` with `anagrams.lir` as its first and only
argument. 
<<Makefile>>=
name = anagrams

all: $(name).html

$(name).html: $(name).lir
	lir $(name).lir

@
This is our first code chunk. Its name is "Makefile"; its contents begin on
the line after its declaration and run up to the `@` on a
line by itself. The contents of this code chunk can go to the file named
`Makefile` in the working directory of the project. To do this, we could
use the following invocation of `notangle`, part of the Noweb distribution:

~~~~
$ notangle -t8 -RMakefile anagrams.lir > Makefile
~~~~

> Run `notangle`; leave tabs untouched; extract the code chunk named
> "Makefile" from the source file `anagrams.lir` to the file `Makefile`.

Usually, we don't have to do this on our own: Lir recognizes code chunks
that should be extracted to files, and does that automatically.

If you look at the final document, you will see that the
[[<<Makefile>>]] code chunk is numbered "C1" (Code chunk 1), and right
under the header it reads, "root chunk".  A root chunk is a code chunk
that is not referenced by any other code chunks.  In other words, there
are no code chunks in this document that are using the code chunk
[[<<Makefile>>]].

The double brackets define inline code in `noweb`.  These are especially
useful when you refer to a code chunk by name, as the references to
[[<<Makefile>>]] above: in the final document, these are going to be
links to the definition of that code chunk.

After saving the contents of [[<<Makefile>>]] above to a file `Makefile` in
the working directory, you can simply invoke `make` (without any arguments)
to run Lir.
