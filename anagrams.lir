**Welcome to the Lir Tutorial**

To make best use of this tutorial, open this source file in a text editor
and start reading.  Every time you see a "`----`" on a line by itself, it
is a good time to stop reading for a moment and try to compile the source
file up to that point.  This can be done by simply invoking `lir` with the
file as its only argument:

~~~~
$ lir anagrams.lir
~~~~

If everything goes well, a final document, `anagrams.html`, will be
generated in your working directory.  Open it in your web browser!

The file up to here is just a plain text file, formatted using the
"markdown" markup recognized by Pandoc.  The whole first line is surrounded
by double asterisk (`**`) for strong emphasis.  In the first paragraph,
there is inline code surrounded by single backticks (`` ` ``).  We see a
single-line block of source code verbatim; usually, this is not necessary
in a Lir source file.

Now let's try to generate the first version of the final document:

- You can copy everything up to (and including) the 4-dash line below to
  file named `anagrams.lir` in your working directory.
- You can also use the link below to download this file.
- For `git` users: you can use the version of `anagrams.lir` in this
  repository in the tag `tag-01`.

Now, run Lir.  Notice how the list above was correctly recognized and
typeset differently.

[Get [source](https://github.com/borisvassilev/lir-tutorial/tree/v01) and [final document](https://borisvassilev.github.io/lir-tutorial/anagrams.01.html)]

----

# Document formatting and structure
The previous part contains a few examples of using markdown to format your
text.  In this part, we will see more uses of markdown.  At the beginning
of this paragraph, there is a line starting with a hash sign (`#`).  This
defines a section heading: in the final document, "Document formatting and
structure" will be typeset differently, and it will appear in a table of
contents at the beginning of the document.

First, let's give our data analysis an aim and a name.  We want to find
anagrams of words in the English language.  We will call the data analysis
"Anagrams", and give our name as an author.

---
title: 'Lir Tutorial: Finding Anagrams'
author: Boris Vassilev
...

(This will not appear in the final document at that spot: it will be used
to create the document title.)

## Sections and subsections
By using 1, 2, or 3 hash signs at the beginning of the line, we define
sections, subsections, subsubsections in the final document.

## Links
Here is a [link to the Pandoc User's Guide](http://pandoc.org/MANUAL.html).
I usually need to keep this guide open while I'm writing a Lir source file.

# Making the final document
In order to be able to use Lir efficiently, you need to learn at least a
bit about the program Make and the syntax of Makefiles.  Here, we will
define a Makefile for our data analysis.

~~~~
name = anagrams

all: $(name).html

$(name).html: $(name).lir
	lir $(name).lir

~~~~

This can go into a file called `Makefile` in the working directory for this
data analysis.  It does very little: tells make that to make all files, it
needs to generate the file `anagrams.html` by running the program `lir`
with `anagrams.lir` as its first and only argument.  Save this to
`Makefile` and run `make` (no arguments necessary) from the working
directory.

[Get [source](https://github.com/borisvassilev/lir-tutorial/tree/v02) and [final document](https://borisvassilev.github.io/lir-tutorial/anagrams.02.html)]

----
