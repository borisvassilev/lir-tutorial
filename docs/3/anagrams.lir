**Welcome to the Lir Tutorial**

To use this tutorial, open the source file `anagrams.lir`
(available in the [repository of the
tutorial](https://github.com/borisvassilev/lir-tutorial)) in a text
editor and start reading.  Every time you see a "`----`" on a line by
itself, it is a good time to stop reading for a moment and try to
compile the source file up to that point.  This can be done by simply
invoking `lir` with the file as its only argument:

~~~~
$ lir anagrams.lir
~~~~

If everything goes well, a final document, `anagrams.html`, will be
generated in your working directory.  Open it in your web browser!

The file up to here is just a plain text file, formatted using the
"markdown" markup recognized by Pandoc.  The whole first line is surrounded
by double asterisk (`**`) for strong emphasis.  In the first paragraph,
there is inline code surrounded by single backticks (`` ` ``).  The
second paragraph is a single-line block of source code verbatim, with a line
"`~~~~`" on bottom and on top; usually, this is not necessary in a Lir
source file.

Now let's try to generate the first version of the final document:

- You can copy everything up to (and including) the 4-dash line below to
  file named `anagrams.lir` in your working directory.
- You can also use the link below to download this file.
- For `git` users: you can use the version of `anagrams.lir` in this
  repository [here](https://github.com/borisvassilev/lir-tutorial/blob/master/docs/1/anagrams.lir).

Now, run Lir.  Notice how the list above was correctly recognized and
typeset differently.

Get 
[source](https://github.com/borisvassilev/lir-tutorial/blob/master/docs/1/anagrams.lir)
and [final document](https://borisvassilev.github.io/lir-tutorial/1/anagrams.html)


----

# Document formatting and structure
The previous part contains a few examples of using markdown to format your
text.  In this part, we will see more uses of markdown.  At the beginning
of this paragraph, there is a line starting with a hash sign (`#`).  This
defines a section heading: in the final document, "Document formatting and
structure" will be typeset differently, and it will appear in a table of
contents at the beginning of the document.

First, let's give our data analysis an aim and a name.  We want to find
anagrams of words in the English language.  We will call the data analysis
"Anagrams", and give our name as an author.

---
title: 'Lir Tutorial: Finding Anagrams'
author: Boris Vassilev
...

(This will not appear in the final document at that spot: it will be used
to create the document title.)

## Sections and subsections
By using 1, 2, or 3 hash signs at the beginning of the line, we define
sections, subsections, subsubsections in the final document.

## Links
Here is a [link to the Pandoc User's Guide](http://pandoc.org/MANUAL.html).
I usually need to keep this guide open while I'm writing a Lir source file.

# Making the final document
In order to be able to use Lir efficiently, you need to learn at least a
bit about the program Make and the syntax of Makefiles.  Here, we will
define a Makefile for our data analysis.  It tells make
that to make all files, it needs to generate the file `anagrams.html` by
running the program `lir` with `anagrams.lir` as its first and only
argument. 
<<Makefile>>=
name = anagrams

all: $(name).html

$(name).html: $(name).lir
	lir $(name).lir

@
This is our first code chunk. Its name is "Makefile"; its contents begin on
the line after its declaration and run up to the `@` on a
line by itself. The contents of this code chunk can go to the file named
`Makefile` in the working directory of the project. To do this, we could
use the following invocation of `notangle`, part of the Noweb distribution:

~~~~
$ notangle -t8 -RMakefile anagrams.lir > Makefile
~~~~

> Run `notangle`; leave tabs untouched; extract the code chunk named
> "Makefile" from the source file `anagrams.lir` to the file `Makefile`.

Usually, we don't have to do this on our own: Lir recognizes code chunks
that should be extracted to files, and does that automatically.

After saving the contents of [[<<Makefile>>]] above to a file `Makefile` in
the working directory, you can simply invoke `make` (without any arguments)
to run Lir.

Get 
[source](https://github.com/borisvassilev/lir-tutorial/blob/master/docs/2/anagrams.lir)
and [final document](https://borisvassilev.github.io/lir-tutorial/2/anagrams.html)


----

# Aim
The aim of this tutorial is to show you how to use Lir efficiently and
effectively.  To achieve this, the tutorial describes the solution to a
simple problem: how to find anagrams in the English language.

The idea is to follow the solution outlined by Bentley in "Programming
Pearls" [@bentley1986programming].  We are going to prepare a dictionary of
words, calculate the signature of each word, sort by signatures.  At that
point, all sets of words that are anagrams of each other will be in
consecutive runs, signed by the same signature.  We will squash them, each
set (with more than two words in it) displayed on a space-separated line.

In the previous paragraph, we have cited the 1986 book "Programming
Pearls".  In the working directory, there is a bibliography file in the
format recognized by Biblatex (I use [JabRef](https://www.jabref.org/)
to maintain that file, but any reference manager can export to a `.bib`
file format).  As long as there is a bibliography file with the same
name as the Lir source file and the `.bib` extension, Lir will generate
the citations and insert a list of citations at the end of the final
document.  Because this source file is `anagrams.lir`, the bibliography
file was saved as `anagrams.bib`.

From now on, the document will end with the beginning of a last section,
"Bibliography", so that it is listed in the Table of Contents.

Get 
[source](https://github.com/borisvassilev/lir-tutorial/blob/master/docs/3/anagrams.lir)
and [final document](https://borisvassilev.github.io/lir-tutorial/3/anagrams.html)


----

This work is licenced under the terms of the GPL (see [COPYING](https://github.com/borisvassilev/lir-tutorial/blob/master/COPYING).

Copyright 2016 Boris Vassilev

# Bibliography
